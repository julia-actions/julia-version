---
name: CI

on:
  pull_request: {}
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  test-typescript:
    name: TypeScript Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        run: npm ci

      - name: Check Format
        run: npm run format:check

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run ci-test

  test-action:
    name: GitHub Actions Test
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create Project.toml and Manifest.toml
        shell: bash
        run: |
          echo -e '[compat]\njulia = "1.7"' >Project.toml
          echo -e 'julia_version = "1.7.3"' >Manifest.toml

      - name: Test julia-version
        id: julia-version
        uses: ./
        with:
          versions: |
            - min
            - manifest
            - lts
            - 1
            - ~1.10
          if-missing: error

      - name: Validate output
        shell: bash
        run: |
          set -x
          [[ "$(jq -r 'length' <<<"$resolved_json")" -eq 4 ]] || exit 1
          [[ "$(jq -r '.[0]' <<<"$resolved_json")" == "1.7.0" ]] || exit 1
          [[ "$(jq -r '.[1]' <<<"$resolved_json")" == "1.7.3" ]] || exit 1
          [[ "$(jq -r '.[2]' <<<"$resolved_json")" =~ ^1\.10\.(9|[1-9][0-9]*)$ ]] || exit 1   # [1.10.9, 1.11.0)
          [[ "$(jq -r '.[3]' <<<"$resolved_json")" =~ ^1\.(1[1-9]|2[0-9]+)\.[0-9]+$ ]] || exit 1  # [1.11.0, âˆž)

          [[ "$resolved" == "" ]] || exit 1
        env:
          resolved_json: ${{ steps.julia-version.outputs.resolved-json }}
          resolved: ${{ steps.julia-version.outputs.resolved }}

  test-yaml-dec:
    name: YAML Decimal Test
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test julia-version
        id: julia-version
        uses: ./
        with:
          versions: 1.10 # !!! IMPORTANT: Do not do this. You should always pass in a string
          if-missing: error

      - name: Validate output
        shell: bash
        run: |
          set -x
          # User expects "1.10.*"
          [[ "$resolved" == "1.1.1" ]] || exit 1
        env:
          resolved: ${{ steps.julia-version.outputs.resolved }}
